/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    /** Get all routes available for this apis */
    get: operations["get-root"];
    parameters: {};
  };
  "/authenticate": {
    /** A request to login with your username and password */
    post: operations["post-authenticate"];
  };
  "/projects": {
    /** Get all projects that you can view. A project is a collection of campaigns linked with your account. */
    get: operations["get-projects"];
  };
  "/customers": {
    /** Get all the customers you have access to */
    get: operations["get-customers"];
    /** Add a new Customer to the platform */
    post: operations["post-customers"];
    parameters: {};
  };
  "/customers/{customer}": {
    /** Get the data for a Customer if you have access to it */
    get: operations["get-customers-customer_id"];
    /** Change the data of a Customer if you have access to it */
    put: operations["put-customers-customer"];
    parameters: {
      path: {
        /** A customer id */
        customer: components["parameters"]["customer"];
      };
    };
  };
  "/customers/{customer}/projects/{project}/campaigns": {
    /** Get all the Campaigns registered in a Project */
    get: operations["get-customer-customer_id-project-project_id-campaigns"];
    /** Create a new Campaign and register it to a Project */
    post: operations["post-customers-customer_id-projects-project_id-campaigns"];
    parameters: {
      path: {
        /** A customer id */
        customer: components["parameters"]["customer"];
        /** A project id */
        project: components["parameters"]["project"];
      };
    };
  };
  "/campaigns": {
    /** Get all the Campaigns you have access to */
    get: operations["get-campaigns"];
    /** Create a new Campaign if you have access to the creation */
    post: operations["post-campaigns"];
  };
  "/campaigns/{campaign}": {
    /** Get the data of a Campaign if you have access to it */
    get: operations["get-campaigns-campaign"];
    /** Edit the data of a Campaign if you have access to it */
    put: operations["put-campaigns-campaign"];
    parameters: {
      path: {
        /** A campaign id */
        campaign: components["parameters"]["campaign"];
      };
    };
  };
  "/campaigns/{campaign}/tasks": {
    /** Get all UseCases linked to a Campaign */
    get: operations["get-campaigns-campaign-tasks"];
    /** Create a new UseCase and link it to a Campaign */
    post: operations["post-campaigns-campaign-tasks"];
    parameters: {
      path: {
        /** A campaign id */
        campaign: components["parameters"]["campaign"];
      };
    };
  };
  "/campaigns/{campaign}/tasks/{task}": {
    /** Get the data of a UseCase in a Campaign */
    get: operations["get-campaigns-campaign-tasks-task"];
    /** Edit a UseCase in a Campaign */
    put: operations["put-campaigns-campaign-tasks-task"];
    parameters: {
      path: {
        /** A campaign id */
        campaign: components["parameters"]["campaign"];
        /** A task id */
        task: components["parameters"]["task"];
      };
    };
  };
  "/popups": {
    /** Retrieve all available popups for admin operations */
    get: operations["get-popups"];
    /** The new popup will be inserted as an available popup on admin areas */
    post: operations["post-popups"];
    parameters: {};
  };
  "/popups/{popup}": {
    /** Retrieve a signle popup for admin operations */
    get: operations["get-popups-popup"];
    /** Edit your popup with a new content or new rules */
    patch: operations["patch-popups-popup"];
    parameters: {
      path: {
        popup: number;
      };
    };
  };
  "/devices/{device_type}/models": {
    /** Get all model of devices with theirs manufacturers */
    get: operations["get-devices-devices-type-model"];
    parameters: {
      path: {
        device_type: string;
      };
    };
  };
  "/certifications": {
    /** Get all certificatio */
    get: operations["get-certifications"];
    parameters: {};
  };
  "/devices/{device_type}/operating_systems": {
    /** Get all operating systems of a device type */
    get: operations["get-devices-operating-systems"];
    parameters: {
      path: {
        device_type: string;
      };
    };
  };
  "/devices/{device_type}/os_versions": {
    /** Get all versions of an operating systems */
    get: operations["get-devices-os-versions"];
    parameters: {
      path: {
        device_type: string;
      };
    };
  };
  "/languages": {
    /** Get all languages */
    get: operations["get-languages"];
  };
  "/employments": {
    /** Get all employments */
    get: operations["get-employments"];
  };
  "/education": {
    /** Get all education levels */
    get: operations["get-education"];
  };
  "/users": {
    /** Get all users you have access to */
    get: operations["get-users"];
    /** Create a new user */
    post: operations["post-users"];
  };
  "/users/me": {
    /** Get your user data */
    get: operations["get-users-me"];
    /** Edit your user data */
    put: operations["put-users-me"];
    delete: operations["delete-users-me"];
    /** Edit basic user fields */
    patch: operations["patch-users-me"];
  };
  "/users/me/bugs": {
    /** Get all the bugs that you uploaded to AppQuality. */
    get: operations["get-users-me-bugs"];
    parameters: {};
  };
  "/users/me/experience": {
    /** Get all the experience points earned in AppQuality. */
    get: operations["get-users-me-experience"];
  };
  "/users/me/fiscal": {
    /** Get your fiscal profile data */
    get: operations["get-users-me-fiscal"];
    /** Update your fiscal data */
    put: operations["put-users-me-fiscal"];
    /** Create a new fiscal data entry from empty state */
    post: operations["post-users-me-fiscal"];
  };
  "/users/me/campaigns": {
    /**
     * get available, and selected campaigns for a single user.
     * filterBy[accepted] = 1 retrieve accepted campaign only, otherwise retrieve available campaign.
     * filterBy[completed] = 1 get completed campaigns only (end date in the past)
     * filterBy[completed] = 0 get not completed campaigns only (end date today or in the future)
     * filterBy[statusID] = 1 get open campaigns
     * filterBy[statusID] = 2 get closed campaigns
     */
    get: operations["get-users-me-campaigns"];
  };
  "/users/me/popups": {
    /** Get all popup defined for your user */
    get: operations["get-users-me-popups"];
  };
  "/users/me/popups/{popup}": {
    /** Get a single popup. Will set the retrieved popup as expired */
    get: operations["get-users-me-popups-popup"];
    parameters: {
      path: {
        popup: number;
      };
    };
  };
  "/users/me/devices": {
    /** Get all your device data */
    get: operations["get-users-me-devices"];
    /** Add a new device to your user */
    post: operations["post-users-me-devices"];
  };
  "/users/me/devices/{deviceId}": {
    /** Retrieve a single device */
    get: operations["get-users-me-devices-deviceId"];
    /** The device will be disabled and won't be available for selections and bugs submission. You can't remove a device currently involved in a campaign */
    delete: operations["delete-users-me-devices-deviceId"];
    /** You can change only operating system version */
    patch: operations["patch-users-me-devices-deviceId"];
    parameters: {
      path: {
        deviceId: number;
      };
    };
  };
  "/users/me/certifications": {
    /** Add one certification to your profile */
    post: operations["post-users-me-certifications"];
  };
  "/users/me/certifications/{certificationId}": {
    /** The certification will be removed */
    delete: operations["delete-users-me-certifications-certificationId"];
    parameters: {
      path: {
        /** The id of the certification */
        certificationId: number;
      };
    };
  };
  "/users/me/languages": {
    /** Edit your spoken languages */
    put: operations["put-users-me-languages"];
    /** Add one of the languages to your profile */
    post: operations["post-users-me-languages"];
  };
  "/users/me/languages/{languageId}": {
    /** The language will be removed from your profile */
    delete: operations["delete-users-me-languages-languageId"];
    parameters: {
      path: {
        /** The id of the language */
        languageId: number;
      };
    };
  };
  "/users/me/additionals/{fieldId}": {
    /** The field data will be replaced with your new data */
    put: operations["put-users-me-additionals-fieldId"];
    parameters: {
      path: {
        /** The id of the field to edit */
        fieldId: number;
      };
    };
  };
  "/custom_user_fields": {
    get: operations["get-customUserFields"];
    parameters: {};
  };
  "/countries/{code}/region": {
    get: operations["get-regions"];
    parameters: {
      path: {
        code: string;
      };
    };
  };
  "/payments": {
    get: operations["get-payments"];
    parameters: {};
  };
  "/payments/{paymentId}": {
    post: operations["post-payments-paymentId"];
    parameters: {
      path: {
        paymentId: string;
      };
    };
  };
}

export interface components {
  schemas: {
    /** Project */
    Project: {
      name?: string;
    };
    Campaign: components["schemas"]["CampaignOptional"] &
      components["schemas"]["CampaignRequired"];
    /** BugSeverity */
    BugSeverity: {
      id?: number;
      name?: string;
    };
    /** BugType */
    BugType: {
      id?: number;
    };
    /** Replicability */
    Replicability: {
      id?: string;
    };
    /** Task */
    Task: components["schemas"]["TaskOptional"] &
      components["schemas"]["TaskRequired"];
    Customer: components["schemas"]["User"] & {
      customer_name?: string;
    };
    /** CampaignField */
    CampaignField: {
      id?: number;
    };
    CampaignOptional: {
      name?: string;
      customer_title?: string;
      internal_id?: string;
      dates?: {
        start?: string;
        end?: string;
        close?: string;
      };
      status?: boolean;
      language?: string;
      public?: boolean;
      hasBugParade?: boolean;
      devices?: {
        id?: string;
      }[];
      minNumberOfMedia?: number;
      titleRule?: boolean;
      allowed?: {
        severities?: components["schemas"]["BugSeverity"][];
        bug_types?: components["schemas"]["BugType"][];
        replicabilities?: components["schemas"]["Replicability"][];
      };
      projectManager?: components["schemas"]["User"];
      customerCanViewReviewing?: boolean;
      additionalFields?: components["schemas"]["CampaignField"][];
      tokens?: number;
      csm_effort?: number;
      ux_effort?: number;
      preview_link?: components["schemas"]["TranslatablePage"];
      manual_link?: components["schemas"]["TranslatablePage"];
      /** @description If bugform is deactivated is a boolean else contains URLs to bugforms for each languages */
      bugform_link?: boolean | components["schemas"]["TranslatablePage"];
      /** @description True if you applied on this Campaign */
      applied?: boolean;
    };
    CampaignRequired: {
      name: string;
      internal_id: string;
      dates: {
        start: string;
        end: string;
        close: string;
      };
      devices: {
        id: string;
      }[];
      projectManager: components["schemas"]["User"];
      campaign_type: components["schemas"]["CampaignType"];
    };
    TaskOptional: {
      name?: string;
      content?: string;
      campaign_id?: number;
      group?: number;
      allow_media?: boolean;
    };
    TaskRequired: {
      name: string;
      content: string;
      campaign_id: number;
    };
    CampaignType: string | number;
    /** User */
    User: {
      username?: string;
      name?: string;
      surname?: string;
      /** Format: email */
      email?: string;
      /** Format: uri */
      image?: string;
      id?: number;
      wp_user_id?: number;
      role?: string;
      is_verified?: boolean;
    };
    /** Bug */
    Bug: {
      severity?: components["schemas"]["BugSeverity"];
      status?: components["schemas"]["BugStatus"];
      campaign?: components["schemas"]["CampaignOptional"] & {
        id?: number;
      };
      title?: string;
    };
    /** BugStatus */
    BugStatus: {
      id?: number;
      name?: string;
      description?: string;
    };
    Popup: {
      profiles?:
        | number[]
        | (
            | "all"
            | "italian"
            | "non-italian"
            | "logged-in-year"
            | "not-logged-in-year"
          );
      once?: boolean;
      content?: string;
      title?: string;
    };
    /** TranslatablePage */
    TranslatablePage: {
      en?: string;
      it?: string;
      es?: string;
    };
    /** UserDevice */
    UserDevice: {
      type: string;
      id: number;
      device:
        | {
            manufacturer: string;
            model: string;
            id?: number;
          }
        | {
            pc_type: string;
          };
      operating_system: {
        id: number;
        platform: string;
        version: string;
      };
    };
    AdditionalField: {
      field_id: number;
      name: string;
      value: string;
      text?: string;
      is_candidate?: boolean;
    };
    Certification: {
      id?: number;
      name: string;
      area: string;
      institute: string;
      /** Format: date */
      achievement_date: string;
    };
    /**
     * FiscalType
     * @enum {string}
     */
    FiscalType: "withholding" | "witholding-extra" | "other" | "non-italian";
    /** CustomUserFieldsData */
    CustomUserFieldsData: {
      id: number;
      /** @enum {string} */
      type: "select" | "multiselect" | "text";
      placeholder?: components["schemas"]["TranslatablePage"];
      allow_other?: boolean;
      name: components["schemas"]["TranslatablePage"];
      format?: string;
      options?: components["schemas"]["CustomUserFieldsDataOption"][];
    };
    /** CustomUserFieldsDataOption */
    CustomUserFieldsDataOption: {
      id: number;
      name: string;
    };
    /** FiscalBirthCity */
    FiscalBirthCity:
      | {
          city: string;
          province: string;
        }
      | {
          /** @description A google maps place id */
          placeId: string;
        };
  };
  responses: {
    /** A user */
    UserData: {
      content: {
        "application/json": components["schemas"]["User"];
      };
    };
    /** Authentication data. The token can be used to authenticate the protected requests */
    Authentication: {
      content: {
        "application/json": {
          id?: number;
          firstName?: string;
          lastName?: string;
          token?: string;
          username?: string;
        };
      };
    };
    /** A list of Campaigns with the Campaign id */
    ListOfCampaigns: {
      content: {
        "application/json": (components["schemas"]["Campaign"] & {
          id: number;
        })[];
      };
    };
    /** A single Campaigns with the Campaign id and Project data */
    SingleCampaign: {
      content: {
        "application/json": components["schemas"]["Campaign"] & {
          id: number;
        } & {
          project?: components["schemas"]["Project"] & {
            id?: number;
          };
        };
      };
    };
    /** An error due to the resource not existing */
    NotFound: {
      content: {
        "application/json": {
          element: string;
          id: number;
          message: string;
        };
      };
    };
    /** An error due to missing required parameters */
    MissingParameters: {
      content: {
        "application/json": {
          message: string;
        };
      };
    };
    /** An error due to insufficient authorization to access the resource */
    NotAuthorized: {
      content: {
        "application/json": {
          message?: string;
        };
      };
    };
  };
  parameters: {
    /** @description A campaign id */
    campaign: string;
    /** @description A task id */
    task: string;
    /** @description A customer id */
    customer: string;
    /** @description A project id */
    project: string;
    /** @description Max items to retrieve */
    limit: number;
    /** @description Items to skip for pagination */
    start: number;
    /** @description Key-value Array for item filtering */
    filterBy: { [key: string]: unknown };
    /** @description How to order values (ASC, DESC) */
    order: "ASC" | "DESC";
    /** @description How to localize values */
    locale: "en" | "it";
    /** @description A comma separated list of fields which will be searched */
    searchBy: string;
    /** @description The value to search for */
    search: string;
  };
}

export interface operations {
  /** Get all routes available for this apis */
  "get-root": {
    parameters: {};
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: unknown };
        };
      };
    };
  };
  /** A request to login with your username and password */
  "post-authenticate": {
    parameters: {};
    responses: {
      200: components["responses"]["Authentication"];
      /** Unauthorized */
      401: {
        content: {
          "application/json": string;
        };
      };
    };
    /** A JSON containing username and password */
    requestBody: {
      content: {
        "application/json": {
          username: string;
          password: string;
        };
      };
    };
  };
  /** Get all projects that you can view. A project is a collection of campaigns linked with your account. */
  "get-projects": {
    parameters: {};
    responses: {
      /** A list of projects */
      200: {
        content: {
          "application/json": (components["schemas"]["Project"] & {
            campaigns?: (components["schemas"]["Campaign"] & {
              id?: number;
            })[];
          })[];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Get all the customers you have access to */
  "get-customers": {
    parameters: {};
    responses: {
      /** An array of Customer objects */
      200: {
        content: {
          "application/json": (components["schemas"]["Customer"] & {
            id?: number;
          })[];
        };
      };
      403: components["responses"]["NotAuthorized"];
    };
  };
  /** Add a new Customer to the platform */
  "post-customers": {
    parameters: {};
    responses: {
      /** Created */
      201: unknown;
      400: components["responses"]["MissingParameters"];
      403: components["responses"]["NotAuthorized"];
    };
    /** The customer you want to create */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer"];
      };
    };
  };
  /** Get the data for a Customer if you have access to it */
  "get-customers-customer_id": {
    parameters: {
      path: {
        /** A customer id */
        customer: components["parameters"]["customer"];
      };
    };
    responses: {
      /** The Customer data you requested */
      200: {
        content: {
          "application/json": components["schemas"]["Customer"];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Change the data of a Customer if you have access to it */
  "put-customers-customer": {
    parameters: {
      path: {
        /** A customer id */
        customer: components["parameters"]["customer"];
      };
    };
    responses: {
      /** OK */
      200: unknown;
      400: components["responses"]["MissingParameters"];
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
    /** The Customer data to edit */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer"];
      };
    };
  };
  /** Get all the Campaigns registered in a Project */
  "get-customer-customer_id-project-project_id-campaigns": {
    parameters: {
      path: {
        /** A customer id */
        customer: components["parameters"]["customer"];
        /** A project id */
        project: components["parameters"]["project"];
      };
    };
    responses: {
      200: components["responses"]["ListOfCampaigns"];
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Create a new Campaign and register it to a Project */
  "post-customers-customer_id-projects-project_id-campaigns": {
    parameters: {
      path: {
        /** A customer id */
        customer: components["parameters"]["customer"];
        /** A project id */
        project: components["parameters"]["project"];
      };
    };
    responses: {
      201: components["responses"]["SingleCampaign"];
      400: components["responses"]["MissingParameters"];
      403: components["responses"]["NotAuthorized"];
    };
    /** The Campaign data to set on the newly created Campaign */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Campaign"];
      };
    };
  };
  /** Get all the Campaigns you have access to */
  "get-campaigns": {
    responses: {
      200: components["responses"]["ListOfCampaigns"];
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Create a new Campaign if you have access to the creation */
  "post-campaigns": {
    responses: {
      201: components["responses"]["SingleCampaign"];
      400: components["responses"]["MissingParameters"];
      403: components["responses"]["NotAuthorized"];
    };
    /** The Campaign data to set on the newly created Campaign, including the id of the Project to link the Campaign to */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Campaign"] & {
          project_id?: number;
        };
      };
    };
  };
  /** Get the data of a Campaign if you have access to it */
  "get-campaigns-campaign": {
    parameters: {
      path: {
        /** A campaign id */
        campaign: components["parameters"]["campaign"];
      };
    };
    responses: {
      200: components["responses"]["SingleCampaign"];
      403: components["responses"]["NotAuthorized"];
      /** Not Found */
      404: unknown;
    };
  };
  /** Edit the data of a Campaign if you have access to it */
  "put-campaigns-campaign": {
    parameters: {
      path: {
        /** A campaign id */
        campaign: components["parameters"]["campaign"];
      };
    };
    responses: {
      200: components["responses"]["SingleCampaign"];
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
    /** The Campaign data to edit */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CampaignOptional"];
      };
    };
  };
  /** Get all UseCases linked to a Campaign */
  "get-campaigns-campaign-tasks": {
    parameters: {
      path: {
        /** A campaign id */
        campaign: components["parameters"]["campaign"];
      };
    };
    responses: {
      /** A list of UseCase linked with the Campaign */
      200: {
        content: {
          "application/json": (components["schemas"]["Task"] & {
            id?: number;
          })[];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Create a new UseCase and link it to a Campaign */
  "post-campaigns-campaign-tasks": {
    parameters: {
      path: {
        /** A campaign id */
        campaign: components["parameters"]["campaign"];
      };
    };
    responses: {
      /** Created */
      201: unknown;
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
    /** The data of the new UseCase to link to the Campaign */
    requestBody: {
      content: {
        "application/json": components["schemas"]["TaskOptional"];
      };
    };
  };
  /** Get the data of a UseCase in a Campaign */
  "get-campaigns-campaign-tasks-task": {
    parameters: {
      path: {
        /** A campaign id */
        campaign: components["parameters"]["campaign"];
        /** A task id */
        task: components["parameters"]["task"];
      };
    };
    responses: {
      /** A UseCase linked with the Campaign */
      200: {
        content: {
          "application/json": components["schemas"]["Task"];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Edit a UseCase in a Campaign */
  "put-campaigns-campaign-tasks-task": {
    parameters: {
      path: {
        /** A campaign id */
        campaign: components["parameters"]["campaign"];
        /** A task id */
        task: components["parameters"]["task"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Task"];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
    /** The data to edit in the UseCase linked to the Campaign */
    requestBody: {
      content: {
        "application/json": components["schemas"]["TaskOptional"];
      };
    };
  };
  /** Retrieve all available popups for admin operations */
  "get-popups": {
    parameters: {
      query: {
        /** Max items to retrieve */
        limit?: components["parameters"]["limit"];
        /** Items to skip for pagination */
        start?: components["parameters"]["start"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": ({
            id?: number;
          } & components["schemas"]["Popup"])[];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** The new popup will be inserted as an available popup on admin areas */
  "post-popups": {
    parameters: {};
    responses: {
      /** Created */
      201: {
        content: {
          "application/json": {
            id?: number;
          } & components["schemas"]["Popup"];
        };
      };
      403: components["responses"]["NotAuthorized"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Popup"];
      };
    };
  };
  /** Retrieve a signle popup for admin operations */
  "get-popups-popup": {
    parameters: {
      path: {
        popup: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            id?: number;
          } & components["schemas"]["Popup"];
        };
      };
      403: components["responses"]["NotAuthorized"];
    };
  };
  /** Edit your popup with a new content or new rules */
  "patch-popups-popup": {
    parameters: {
      path: {
        popup: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            id?: number;
          } & components["schemas"]["Popup"];
        };
      };
      403: components["responses"]["NotAuthorized"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Popup"];
      };
    };
  };
  /** Get all model of devices with theirs manufacturers */
  "get-devices-devices-type-model": {
    parameters: {
      path: {
        device_type: string;
      };
      query: {
        /** Key-value Array for item filtering */
        filterBy?: components["parameters"]["filterBy"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            manufacturer?: string;
            models?: {
              id?: number;
              name?: string;
            }[];
          }[];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Get all certificatio */
  "get-certifications": {
    parameters: {
      query: {
        /** Key-value Array for item filtering */
        filterBy?: components["parameters"]["filterBy"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            id: number;
            name: string;
            area: string;
            institute: string;
          }[];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Get all operating systems of a device type */
  "get-devices-operating-systems": {
    parameters: {
      path: {
        device_type: string;
      };
      query: {
        /** Key-value Array for item filtering */
        filterBy?: components["parameters"]["filterBy"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            id?: number;
            name?: string;
          }[];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Get all versions of an operating systems */
  "get-devices-os-versions": {
    parameters: {
      path: {
        device_type: string;
      };
      query: {
        /** Key-value Array for item filtering */
        filterBy?: components["parameters"]["filterBy"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            id?: number;
            name?: string;
          }[];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Get all languages */
  "get-languages": {
    parameters: {};
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            id: number;
            name: string;
          }[];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Get all employments */
  "get-employments": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            id: number;
            name: string;
          }[];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Get all education levels */
  "get-education": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            id: number;
            name: string;
          }[];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Get all users you have access to */
  "get-users": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["User"][];
        };
      };
    };
  };
  /** Create a new user */
  "post-users": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          name: string;
          surname: string;
          /** Format: email */
          email: string;
          password: string;
          country: string;
          /** Format: date */
          birthDate: string;
          /**
           * @description A referral code (formatted as TESTER_ID-CAMPAIGN_ID)
           * @example 555-1234
           */
          referral?: string;
        };
      };
    };
  };
  /** Get your user data */
  "get-users-me": {
    parameters: {
      query: {
        /** Comma separated string of specific fields requested */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            username?: string;
            name?: string;
            surname?: string;
            /** Format: email */
            email?: string;
            image?: string;
            id: number;
            wp_user_id?: number;
            role?: string;
            is_verified?: boolean;
            rank?: string;
            total_exp_pts?: number;
            booty?: number;
            pending_booty?: number;
            languages?: {
              id?: number;
              name?: string;
            }[];
            onboarding_completed?: boolean;
            additional?: components["schemas"]["AdditionalField"][];
            /** @enum {string} */
            gender?: "male" | "female" | "not-specified";
            /** Format: date */
            birthDate?: string;
            phone?: string;
            education?: {
              id: number;
              name: string;
            };
            profession?: {
              id: number;
              name: string;
            };
            certifications?: components["schemas"]["Certification"][] | boolean;
            completionPercent?: number;
            country?: string;
            city?: string;
            attended_cp?: number;
            approved_bugs?: number;
          };
        };
      };
    };
  };
  /** Edit your user data */
  "put-users-me": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          name?: string;
          surname?: string;
          password?: string;
          email?: string;
        };
      };
    };
  };
  "delete-users-me": {
    responses: {
      /** OK */
      200: unknown;
      403: components["responses"]["NotAuthorized"];
    };
    requestBody: {
      content: {
        "application/json": {
          reason: string;
        };
      };
    };
  };
  /** Edit basic user fields */
  "patch-users-me": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            username?: string;
            name?: string;
            surname?: string;
            email?: string;
            image?: string;
            id: number;
            wp_user_id?: number;
            role?: string;
            is_verified?: boolean;
            rank?: string;
            total_exp_pts?: number;
            booty?: number;
            pending_booty?: number;
            languages?: {
              id?: number;
              name?: string;
            }[];
            onboarding_completed?: boolean;
            additional?: components["schemas"]["AdditionalField"][];
            /** @enum {string} */
            gender?: "male" | "female" | "not-specified";
            /** Format: date */
            birthDate?: string;
            phone?: string;
            education?: {
              id: number;
              name: string;
            };
            profession?: {
              id: number;
              name: string;
            };
            certifications?: components["schemas"]["Certification"][] | boolean;
            completionPercent?: number;
            country?: string;
            city?: string;
            attended_cp?: number;
            approved_bugs?: number;
          };
        };
      };
      /** Bad Request */
      400: unknown;
      403: components["responses"]["NotAuthorized"];
    };
    requestBody: {
      content: {
        "application/json": {
          name?: string;
          /** Format: email */
          email?: string;
          onboarding_completed?: boolean;
          surname?: string;
          /** @enum {string} */
          gender?: "male" | "female" | "not-specified";
          birthDate?: string;
          phone?: string;
          education?: number;
          profession?: number;
          country?: string;
          city?: string;
          password?: string;
          oldPassword?: string;
        };
      };
    };
  };
  /** Get all the bugs that you uploaded to AppQuality. */
  "get-users-me-bugs": {
    parameters: {
      query: {
        /** Items to skip for pagination */
        start?: components["parameters"]["start"];
        /** Max items to retrieve */
        limit?: components["parameters"]["limit"];
        /** Key-value Array for item filtering */
        filterBy?: components["parameters"]["filterBy"];
        /** The field for item order */
        orderBy?: "title" | "campaign" | "status" | "id" | "severity";
        /** How to order values (ASC, DESC) */
        order?: components["parameters"]["order"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            results: ({
              id: number;
            } & components["schemas"]["Bug"])[];
            limit?: number;
            size?: number;
            start?: number;
            total?: number;
          };
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Get all the experience points earned in AppQuality. */
  "get-users-me-experience": {
    parameters: {
      query: {
        /** Max items to retrieve */
        limit?: components["parameters"]["limit"];
        /** Items to skip for pagination */
        start?: components["parameters"]["start"];
        /** Key-value Array for item filtering */
        filterBy?: components["parameters"]["filterBy"];
        /** How to order values (ASC, DESC) */
        order?: components["parameters"]["order"];
        /** A comma separated list of fields which will be searched */
        searchBy?: components["parameters"]["searchBy"];
        /** The value to search for */
        search?: components["parameters"]["search"];
        /** The field for item order */
        orderBy?: "amount" | "campaign" | "date" | "note" | "activity" | "id";
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            results: {
              id: number;
              activity: {
                id: number;
              };
              campaign: {
                id: number;
                title?: string;
              };
              /** Format: date */
              date: string;
              amount: number;
              note?: string;
            }[];
            limit?: number;
            size?: number;
            start?: number;
            /** @description The total number of experience entries */
            total?: number;
            /** @description The total sum of experience */
            sum: number;
          };
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Get your fiscal profile data */
  "get-users-me-fiscal": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            address: {
              country: string;
              province: string;
              city: string;
              street: string;
              streetNumber?: string;
              cityCode: string;
            };
            type: components["schemas"]["FiscalType"];
            birthPlace: {
              city?: string;
              province?: string;
            };
            fiscalId: string;
            /** @enum {string} */
            fiscalStatus: "Verified" | "Unverified";
            /** @enum {string} */
            gender: "male" | "female";
          };
        };
      };
      401: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Update your fiscal data */
  "put-users-me-fiscal": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            address: {
              country: string;
              province: string;
              city: string;
              street: string;
              streetNumber?: string;
              cityCode: string;
            };
            type: components["schemas"]["FiscalType"];
            birthPlace?: {
              city?: string;
              province?: string;
            };
            fiscalId: string;
            /** @enum {string} */
            fiscalStatus: "Verified" | "Unverified";
            /** @enum {string} */
            gender: "male" | "female";
          };
        };
      };
      401: components["responses"]["NotAuthorized"];
    };
    requestBody: {
      content: {
        "application/json": {
          address: {
            country: string;
            province: string;
            city: string;
            street: string;
            streetNumber: string;
            cityCode: string;
          };
          type: components["schemas"]["FiscalType"];
          birthPlace?: components["schemas"]["FiscalBirthCity"];
          fiscalId: string;
          /** @enum {string} */
          gender: "male" | "female";
        };
      };
    };
  };
  /** Create a new fiscal data entry from empty state */
  "post-users-me-fiscal": {
    responses: {
      /** Created */
      201: {
        content: {
          "application/json": {
            address: {
              country: string;
              province: string;
              city: string;
              street: string;
              streetNumber?: string;
              cityCode: string;
            };
            type: components["schemas"]["FiscalType"];
            birthPlace?: {
              city?: string;
              province?: string;
            };
            fiscalId: string;
            /** @enum {string} */
            fiscalStatus: "Verified" | "Unverified";
            /** @enum {string} */
            gender: "male" | "female";
          };
        };
      };
      401: components["responses"]["NotAuthorized"];
    };
    requestBody: {
      content: {
        "application/json": {
          address: {
            country: string;
            province: string;
            city: string;
            street: string;
            streetNumber: string;
            cityCode: string;
          };
          type: components["schemas"]["FiscalType"];
          birthPlace?: components["schemas"]["FiscalBirthCity"];
          fiscalId: string;
          /** @enum {string} */
          gender: "male" | "female";
        };
      };
    };
  };
  /**
   * get available, and selected campaigns for a single user.
   * filterBy[accepted] = 1 retrieve accepted campaign only, otherwise retrieve available campaign.
   * filterBy[completed] = 1 get completed campaigns only (end date in the past)
   * filterBy[completed] = 0 get not completed campaigns only (end date today or in the future)
   * filterBy[statusID] = 1 get open campaigns
   * filterBy[statusID] = 2 get closed campaigns
   */
  "get-users-me-campaigns": {
    parameters: {
      query: {
        /** Items to skip for pagination */
        start?: components["parameters"]["start"];
        /** Max items to retrieve */
        limit?: components["parameters"]["limit"];
        /** Key-value Array for item filtering */
        filterBy?: components["parameters"]["filterBy"];
        /** How to localize values */
        locale?: components["parameters"]["locale"];
        /** How to order values (ASC, DESC) */
        order?: components["parameters"]["order"];
        /** The field for item order */
        orderBy?: "name" | "start_date" | "end_date" | "close_date";
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            results?: ({
              id: number;
            } & components["schemas"]["Campaign"])[];
            limit?: number;
            size?: number;
            start?: number;
            total?: number;
          };
        };
      };
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  /** Get all popup defined for your user */
  "get-users-me-popups": {
    parameters: {
      query: {
        /** Show all popup history, expired popups included */
        showExpired?: boolean;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            id?: number;
            title?: string;
            content?: string;
            once?: boolean;
          }[];
        };
      };
    };
  };
  /** Get a single popup. Will set the retrieved popup as expired */
  "get-users-me-popups-popup": {
    parameters: {
      path: {
        popup: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            id?: number;
          } & components["schemas"]["Popup"];
        };
      };
    };
  };
  /** Get all your device data */
  "get-users-me-devices": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": ({
            id?: number;
          } & components["schemas"]["UserDevice"])[];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Add a new device to your user */
  "post-users-me-devices": {
    responses: {
      /** Created */
      201: {
        content: {
          "application/json": {
            id?: number;
          } & components["schemas"]["UserDevice"];
        };
      };
      403: components["responses"]["NotAuthorized"];
    };
    requestBody: {
      content: {
        "application/json": {
          device:
            | number
            | (
                | "Notebook"
                | "Desktop"
                | "Ultrabook"
                | "Gaming PC"
                | "Tablet PC / Hybrid"
              );
          operating_system: number;
        };
      };
    };
  };
  /** Retrieve a single device */
  "get-users-me-devices-deviceId": {
    parameters: {
      path: {
        deviceId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            id?: number;
          } & components["schemas"]["UserDevice"];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** The device will be disabled and won't be available for selections and bugs submission. You can't remove a device currently involved in a campaign */
  "delete-users-me-devices-deviceId": {
    parameters: {
      path: {
        deviceId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            message?: string;
          };
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** You can change only operating system version */
  "patch-users-me-devices-deviceId": {
    parameters: {
      path: {
        deviceId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            id?: number;
          } & components["schemas"]["UserDevice"];
        };
      };
      /** Not Modified */
      304: {
        content: {
          "application/json": {
            id?: number;
          } & components["schemas"]["UserDevice"];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
    requestBody: {
      content: {
        "application/json": {
          operating_system: number;
        };
      };
    };
  };
  /** Add one certification to your profile */
  "post-users-me-certifications": {
    responses: {
      /** Created */
      201: {
        content: {
          "application/json":
            | components["schemas"]["Certification"]
            | {
                message: string;
              };
        };
      };
      403: components["responses"]["NotAuthorized"];
    };
    requestBody: {
      content: {
        "application/json":
          | {
              certifications: boolean;
            }
          | {
              certification_id: number;
              /** Format: date */
              achievement_date: string;
            };
      };
    };
  };
  /** The certification will be removed */
  "delete-users-me-certifications-certificationId": {
    parameters: {
      path: {
        /** The id of the certification */
        certificationId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            message?: string;
          };
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Edit your spoken languages */
  "put-users-me-languages": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            id?: number;
            name?: string;
          }[];
        };
      };
      403: components["responses"]["NotAuthorized"];
    };
    requestBody: {
      content: {
        "application/json": number[];
      };
    };
  };
  /** Add one of the languages to your profile */
  "post-users-me-languages": {
    responses: {
      /** Created */
      201: {
        content: {
          "application/json": {
            id: string;
            name: string;
          };
        };
      };
      403: components["responses"]["NotAuthorized"];
    };
    requestBody: {
      content: {
        "application/json": {
          languageId?: number;
        };
      };
    };
  };
  /** The language will be removed from your profile */
  "delete-users-me-languages-languageId": {
    parameters: {
      path: {
        /** The id of the language */
        languageId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            message?: string;
          };
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** The field data will be replaced with your new data */
  "put-users-me-additionals-fieldId": {
    parameters: {
      path: {
        /** The id of the field to edit */
        fieldId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json":
            | components["schemas"]["AdditionalField"][]
            | components["schemas"]["AdditionalField"];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
    requestBody: {
      content: {
        "application/json":
          | {
              value: string;
              is_candidate?: boolean;
            }[]
          | {
              value: string;
              is_candidate?: boolean;
            };
      };
    };
  };
  "get-customUserFields": {
    parameters: {};
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            group: {
              id: number;
              name: components["schemas"]["TranslatablePage"];
              description?: components["schemas"]["TranslatablePage"];
            };
            fields?: components["schemas"]["CustomUserFieldsData"][];
          }[];
        };
      };
    };
  };
  "get-regions": {
    parameters: {
      path: {
        code: string;
      };
      query: {
        languageCode?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            name: string;
            value: string;
          }[];
        };
      };
    };
  };
  "get-payments": {
    parameters: {
      query: {
        /** The status of the payment */
        status?: "pending" | "failed";
        /** How to order values (ASC, DESC) */
        order?: components["parameters"]["order"];
        /** The value to order by */
        orderBy?: "created" | "updated" | "id";
        /** Items to skip for pagination */
        start?: components["parameters"]["start"];
        /** Max items to retrieve */
        limit?: components["parameters"]["limit"];
        /** Key-value Array for item filtering */
        filterBy?: components["parameters"]["filterBy"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            limit?: number;
            size: number;
            start: number;
            total?: number;
            items: {
              /** @description The timestamp (GMT) of the request creation */
              created: string;
              /** @description The timestamp (GMT) of the request last update */
              updated: string;
              id: number;
              amount: {
                value: number;
                currency: string;
              };
              /** @enum {string} */
              type: "paypal" | "transferwise";
              tryber: {
                id: number;
                name: string;
                surname: string;
              };
              error?: string;
            }[];
          };
        };
      };
      403: components["responses"]["NotAuthorized"];
    };
  };
  "post-payments-paymentId": {
    parameters: {
      path: {
        paymentId: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json": {
            /** @enum {string} */
            element: "payments";
            id: number;
            message: {
              /** @enum {string} */
              code: "GENERIC_ERROR";
              data: string;
            };
          };
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
      /** Unprocessable Entity (WebDAV) */
      422: {
        content: {
          "application/json": {
            /** @enum {string} */
            element: "payments";
            id: number;
            message: {
              /** @enum {string} */
              code:
                | "GENERIC_ERROR"
                | "NO_FUNDS"
                | "DUPLICATE_PAYMENT"
                | "IBAN_NOT_VALID"
                | "INSUFFICIENT_FUNDS"
                | "RECEIVER_UNREGISTERED";
              data: string;
            };
          };
        };
      };
    };
  };
}

export interface external {}
